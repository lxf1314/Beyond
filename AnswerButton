----------------------------------------------------------------------------------------------------------------------------------
MainActivity.java
----------------------------------------------------------------------------------------------------------------------------------
package lxf.bj.android.myapplication;

import android.app.Activity;
import android.os.Bundle;
import android.widget.Toast;

public class MainActivity extends Activity implements AnswerButton.myOnEventListener{

    private AnswerButton as;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        as = (AnswerButton) findViewById(R.id.AnswerButton);


    }

    @Override
    public void RightEvent() {
        Toast.makeText(this,"接听",Toast.LENGTH_SHORT).show();
    }

    @Override
    public void LeftEvent() {
        Toast.makeText(this,"挂断",Toast.LENGTH_SHORT).show();
    }
}

----------------------------------------------------------------------------------------------------------------------------------
MainActivity.xml
----------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="lxf.bj.android.myapplication.MainActivity">

    <lxf.bj.android.myapplication.AnswerButton
        android:id="@+id/AnswerButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true">

    </lxf.bj.android.myapplication.AnswerButton>

</RelativeLayout>
----------------------------------------------------------------------------------------------------------------------------------
AnswerButton.java
----------------------------------------------------------------------------------------------------------------------------------
package lxf.bj.android.myapplication;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;

/**
 * Created by Administrator on 2016/10/19.
 */

public class AnswerButton extends View{

    private Bitmap backgroundBitmap;// 背景图
    private Bitmap slidBtn;// 可以滑动的图片
    private int backgroundWidth, slidBtnWidth;
    private Paint paint;//画笔
    private float slidBtn_left;// 滑动按钮的左边距
    private int firstX;// 手机按下的x坐标
    private int lastX;// 手机抬起的x坐标
    public myOnEventListener listener;

    public AnswerButton(Context context) {
        super(context);
        initView();
    }

    public AnswerButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();
    }

    public AnswerButton(Context context, AttributeSet attrs,
                            int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView();
    }

    private void initView() {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        //获取按钮背景
        backgroundBitmap = BitmapFactory.decodeResource(getResources(),
                R.drawable.back);
        options.inSampleSize = ScrennTools.calculateInSampleSize(options, 110,
                160); // 110,160：转换后的宽和高，具体值会有些出入
        options.inJustDecodeBounds = false;
        //获取滑动按钮图
        slidBtn = BitmapFactory.decodeResource(getResources(), R.drawable.answer);

        paint = new Paint();
        //设置抗锯齿
        paint.setAntiAlias(true);

        backgroundWidth = backgroundBitmap.getWidth();
        slidBtnWidth = slidBtn.getWidth();

        slidBtn_left = (backgroundWidth / 2) - (slidBtnWidth / 2);
    }
    /*
     * 测量view宽高
     */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        // 设置宽高
        setMeasuredDimension(backgroundBitmap.getWidth(),
                backgroundBitmap.getHeight());
    }

    /*
     * 绘制当前view的内容
     */
    @Override
    protected void onDraw(Canvas canvas) {
        canvas.drawBitmap(backgroundBitmap, 0, 0, paint);
        canvas.drawBitmap(slidBtn, slidBtn_left, 0, paint);
    }
    /*
     * 滑动事件
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                firstX = lastX = (int) event.getX();
                break;
            case MotionEvent.ACTION_MOVE:
                // 计算手指移动的距离
                int dis = (int) event.getX();
                // 根据手指的位置，改变slidBtn_left的值
                slidBtn_left = dis;
                break;

            case MotionEvent.ACTION_UP:
                int maxLeft = backgroundWidth - slidBtnWidth;
                if (slidBtn_left >= maxLeft) {
                    // 滑动到最右调用的方法
                    listener.RightEvent();
                } else if (slidBtn_left < (slidBtnWidth / 2)) {
                    // 滑动到最左调用的方法``
                    listener.LeftEvent();
                } else {
                    // 接听按钮回到原点
                    Log.i("simple", "接听按钮回到原点");
                    slidBtn_left = (backgroundWidth / 2) - (slidBtnWidth / 2);
                }
                break;
        }
        flushView();
        return true;
    }

    /**
     * 刷新当前视图
     */
    private void flushView() {
        int maxLeft = backgroundWidth - slidBtnWidth;
        // 确保 slideBtn_left >= 0
        slidBtn_left = (slidBtn_left > 0) ? slidBtn_left : 0;

        // 确保 slideBtn_left <=maxLeft
        slidBtn_left = (slidBtn_left < maxLeft) ? slidBtn_left : maxLeft;

        /*
         * 刷新当前视图调用invalidate 导致 执行onDraw执行
         */
        invalidate();
    }
    /**view事件方法*/
    public void setOnEvent(myOnEventListener listener){
        this.listener = listener;
    }
    /**view接口方法*/
    interface myOnEventListener{
         void RightEvent();
         void LeftEvent();
    }


}
----------------------------------------------------------------------------------------------------------------------------------
ScrennTools.java
----------------------------------------------------------------------------------------------------------------------------------
package lxf.bj.android.myapplication;

import android.graphics.BitmapFactory;

/**
 * Created by Administrator on 2016/10/19.
 */

public class ScrennTools {

    static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight){
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;
        if (height > reqHeight || width > reqWidth) {
            final int halfHeight = height / 2;
            final int halfWidth = width / 2;
            while ((halfHeight / inSampleSize) > reqHeight
                    && (halfWidth / inSampleSize) > reqWidth) {
                inSampleSize *= 2;
            }
        }
        return inSampleSize;
    }

}

