package com.gionee.phone;

import android.content.Context;
import android.content.SharedPreferences;
import android.provider.Settings;
import android.telephony.PhoneNumberUtils;
import android.text.TextUtils;
import android.util.Log;
import android.os.SystemProperties;
import android.telephony.TelephonyManager;
import com.gionee.phone.GnHotLinesUtil;

public class GnAutoIpUtil {
	private final static String TAG = "AutoIpUtil";
	
    private final static String SPECIALS_NUMBER[] = {"10000","10010","10086","1008611","17900","17911","17951","114","112","110","120","119","12315",
        "12358","12365","12310","12369","95588","95533","95599","95559","95555","95528","95566",
        "95501","122","12121","12395","12117","103","108","95580","11185","95119","999",
        "95598","12318","12366"
    };
    
    private final static String UNICOM_ICCID = "898601";
    private final static String MOBILE_ICCID = "898600";
    private final static int MOBILE_ICCID_TYPE = 0;
    private final static int UNICOM_ICCID_TYPE = 1;
    private static final String IP_CALL_FILE_NAME = "com.android.phone.ip_call_area";
    public static final String KEY_AUTO_IP_DIAL_IF_SUPPORT = "autoIpDial";
    
    private static boolean mIsIpDialSupport = true;//SystemProperties.get("ro.gn.ip.dial", "yes").equals("yes");
    
    public static String formNumber(String number){
    	android.util.Log.i("lxf", "formNumber");
    	String[] mFilterString = {"-", " "};
    	StringBuffer searchNum = null;
    	searchNum = new StringBuffer(number);
		for ( int i = 0; i < mFilterString.length; i++ ) {
			while ( searchNum.indexOf(mFilterString[i]) > 0 ) {
				searchNum = searchNum.deleteCharAt(searchNum.indexOf(mFilterString[i]));
			}
		}
		return searchNum.toString();
    }
    
    public static boolean isSpecialNumber(String number){
    	android.util.Log.i("lxf", "isSpecialNumber");
    	
    	boolean specialValue = false;
    	for(String singleNumber :SPECIALS_NUMBER){
    		if( singleNumber.trim().equals(number) ){
    			specialValue =true;
    			break;
    		}
    	}
    	return specialValue;
    }
    
    public static String [] getFilterNumberPrefix(){
    	String[] filterNumber = {"17951","12593","17911","10193","+86"};
    	return filterNumber;
    }
    
    public static int getCardType(Context context,  int slot){
    	android.util.Log.i("lxf", "getCardType");
        int cardType = -1;
        String operator ="";
        operator = TelephonyManager.getDefault().getSimOperator(slot);
        if (operator != null) {
            if (operator.equals("46000") || operator.equals("46002")|| operator.equals("46007")) {
                cardType = MOBILE_ICCID_TYPE;
            }else if (operator.equals("46001")) {
                cardType = UNICOM_ICCID_TYPE;
            }
        }
        Log.e(TAG, "operator = " + operator +" , cardType "+cardType + " --slot: " + slot);
        
        return cardType;     
     }
    
    public static String filterNumberPrefix(String mobilePrefix,String unicomPrefix,String prefix,String number){   
    	android.util.Log.i("lxf", "filterNumberPrefix");
    	String[] filterNumbers = getFilterNumberPrefix();    	
    	for(String filter_Number : filterNumbers){
        	boolean isStartPrefix = number.trim().startsWith(filter_Number.trim()) && !number.trim().equals(filter_Number.trim());
			if(isStartPrefix){
        		return number.substring(filter_Number.length());
        	}
    	}
    	
    	return number;
    }

    public static String convert2IpNum(Context context,String number,int slot){
    	android.util.Log.i("lxf", "convert2IpNum");
    	String prefixNumber = formNumber(number);
    	int cardType = -1;
    	Log.e(TAG, "prefixNumber : "+prefixNumber);	 
    	if(mIsIpDialSupport){
			
			if( isSpecialNumber(prefixNumber) ){
				return prefixNumber;
			}
			
			if ( PhoneNumberUtils.isEmergencyNumber(prefixNumber) ) {
				return prefixNumber;
			}
	        Log.e(TAG, "number : "+number +"slot1: "+slot);	        
			
//			SharedPreferences preferences = context.getSharedPreferences(IP_CALL_FILE_NAME,Context.MODE_WORLD_READABLE);
//			if ( preferences != null ) {				
//				String area = preferences.getString("area", "");
//				String status = preferences.getString("status", "");
	            String area = Settings.System.getString(context.getContentResolver(), "area");
	            String status =Settings.System.getString(context.getContentResolver(), "status");
				Log.i(TAG, "area:" + area + " status: " + status );
				
				if (isInVaild(area, status)) {
					return prefixNumber;
				}
				
				String prefix = null;
				cardType = getCardType(context, slot);
//				String unicomPrefix = preferences.getString(
//						"unicomPrefix", "");
//				String mobilePrefix = preferences.getString(
//						"mobilePrefix", "");
				
				String unicomPrefix = Settings.System.getString(context.getContentResolver(), "unicomPrefix");
				String mobilePrefix = Settings.System.getString(context.getContentResolver(), "mobilePrefix");

				if (cardType == MOBILE_ICCID_TYPE) {
					prefix = mobilePrefix;
				} else if (cardType == UNICOM_ICCID_TYPE) {
					prefix = unicomPrefix;
				}
				
				if (!TextUtils.isEmpty(prefix)) {
					prefixNumber = filterNumberPrefix(mobilePrefix,
							unicomPrefix, null, prefixNumber);

					Log.i(TAG, " prefix: " + prefix + " prefixNumber " + prefixNumber);
					
					prefixNumber = getPrefixNumber(prefixNumber, area, prefix);
				}
//			} else {
//				Log.e(TAG, TAG + "preferences is null");
//			}
		}
		return prefixNumber;
    }

	private static String getPrefixNumber(String prefixNumber, String area,
			String prefix) {
		android.util.Log.i("lxf", "getPrefixNumber");
		String numberArea = GnPhoneUtils.getNumArea(prefixNumber);
		String areaArea = GnPhoneUtils.getNumArea(area);
		Log.e(TAG, "numberArea "+numberArea +" areaArea "+areaArea);
		
		if (!TextUtils.isEmpty(numberArea)) {
			if (!TextUtils.isEmpty(areaArea)) {						
				if (!numberArea.contains(areaArea)) {
					try {
						char[] tagsChars = {',','/','-'};
						boolean addPrefix = true;
						a:for (int j = 0; j < tagsChars.length; j++) {
							String tag = tagsChars[j]+"";
							int index = areaArea.indexOf(tag);
							if (index > 0) {
								String[] areaAreas = areaArea.split(tag);
								if (areaAreas != null && areaAreas.length > 0) {
									String firstSplitValue  = areaAreas[0];
									b:for (int i = 0; i < areaAreas.length; i++) {
										String splitValues = areaAreas[i];
										if (numberArea.contains(splitValues)) {
											if(numberArea.length() > 1 && firstSplitValue.length() > 1){
												if(numberArea.substring(0, 2).equals(firstSplitValue.substring(0,2))){
													addPrefix = false;
													break b;
												}
											}
										}
									}
									if(!addPrefix){
										break a;
									}
								}
							} 
						}

						if (addPrefix) {
							prefixNumber = prefix + prefixNumber;
						}
					} catch (Exception e) {
						
					}
				}
			}
			Log.i(TAG, "  is belong to " + numberArea + "..." + "area:"+ areaArea + " prefixnumber:" + prefixNumber);
		}
		return prefixNumber;
	}

	private static boolean isInVaild(String area, String status) {
		android.util.Log.i("lxf", "isInVaild");
		return TextUtils.isEmpty(status) || status.equals("false") || TextUtils.isEmpty(area);
	}
	
	public static String convertNumber(Context context, String number, int slot) {
		android.util.Log.i("lxf", "convertNumber");
		String[] info = GnHotLinesUtil.getInfo(context, number.replaceAll(" ", ""));
		if (info == null) {
			number = GnAutoIpUtil.convert2IpNum(context, number, slot);
		} else {
			Log.e(TAG, "info != null");
		}
		return number;
	}
}
